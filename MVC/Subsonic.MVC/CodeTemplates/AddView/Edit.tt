<#@ template language="C#" HostSpecific="True" #>
<#@ output extension="aspx" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#
MvcTextTemplateHost mvcHost = (MvcTextTemplateHost)(Host);
string mvcViewDataTypeGenericString = (!String.IsNullOrEmpty(mvcHost.ViewDataTypeName)) ? "<" + mvcHost.ViewDataTypeName + ">" : String.Empty;
int CPHCounter = 1;
#>
<#
// The following chained if-statement outputs the user-control needed for a partial view, or opens the asp:Content tag or html tags used in the case of a master page or regular view page
if(mvcHost.IsPartialView) {
#>
<%@ Control Language="C#" Inherits="System.Web.Mvc.ViewUserControl<#= mvcViewDataTypeGenericString #>" %>

<#
} else if(mvcHost.IsContentPage) {
#>
<%@ Page Title="" Language="C#" MasterPageFile="<#= mvcHost.MasterPageFile #>" Inherits="System.Web.Mvc.ViewPage<#= mvcViewDataTypeGenericString #>" %>

<#
	foreach(string cphid in mvcHost.ContentPlaceHolderIDs) {
		if(cphid.Equals("TitleContent", StringComparison.OrdinalIgnoreCase)) {
#>
<asp:Content ID="Content<#= CPHCounter #>" ContentPlaceHolderID="<#= cphid #>" runat="server">
	<#= mvcHost.ViewName #>
</asp:Content>

<#
			CPHCounter++;
		}
	}
#>
<asp:Content ID="Content<#= CPHCounter #>" ContentPlaceHolderID="<#= mvcHost.PrimaryContentPlaceHolderID #>" runat="server">

    <h2><#= mvcHost.ViewName #></h2>

<#
} else {
#>
<%@ Page Language="C#" Inherits="System.Web.Mvc.ViewPage<#= mvcViewDataTypeGenericString #>" %>

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml" >
<head runat="server">
    <title><#= mvcHost.ViewName #></title>
</head>
<body>
<#
}
#>
<#
if(!String.IsNullOrEmpty(mvcViewDataTypeGenericString)) {

    string className=mvcViewDataTypeGenericString.Substring(
        mvcViewDataTypeGenericString.LastIndexOf("."),
        mvcViewDataTypeGenericString.Length-mvcViewDataTypeGenericString.LastIndexOf(".")
    ).Replace(".","").Replace(">","");

	Dictionary<string, string> properties = new Dictionary<string, string>();
	FilterProperties(mvcHost.ViewDataType, properties);
#>
 
<link type="text/css" href="/scripts/ui-lightness/jquery-ui-1.7.1.custom.css" rel="stylesheet" />
<script type="text/javascript" src="/scripts/jquery-1.3.2.min.js"></script>
<script type="text/javascript" src="/scripts/jquery-ui-1.7.1.min.js"></script>
<script type="text/javascript" src="/scripts/jquery.form.js"></script>


<script type="text/javascript">
    $(function() {
        
        //UI wiring
        $(".datepicker").datepicker();
        $('#editForm').ajaxForm({
            success:showResponse
        });
        
        //click events
        $('#btnSave').click( function(){
            $('#editForm').submit();
        });
        $('#btnDelete').click( function() {
            if(confirm("Are you sure you want to delete <%=Model.DescriptorValue() %>? This cannot be undone...")){
                $.post("<%=Url.Action("delete")%>",
                    { id: "<%=Model.KeyValue() %>" },
                    function(data){
                    showResponse(data);
                    $('#btnDelete').attr("disabled", true);
                    $('#btnSave').attr("disabled", true);
                });
            }
        });
        
        
        
    });

    function showResponse(responseText, statusText) {
        if (responseText.substring(5, 0) == "ERROR") {
            $('#error-message').append(responseText);
            $('#error').show("slide",{direction:"up"}, 500 );
            $('#error').effect("highlight");
        } else {
            $('#info-message').append(responseText);
            $('#info').show("slide", { direction: "up" }, 500);
            $('#info').effect("highlight");
        }
    }
</script>
 
   
	<div class="ui-widget" style="display:none" id="info"> 
	    <div class="ui-state-highlight ui-corner-all" style="margin-top: 20px; padding: 0 .7em;"> 
		    <p id="info-message"><span class="ui-icon ui-icon-info" style="float: left; margin-right: .3em;"></span> 
			    
		    </p> 
	    </div> 
    </div>
	<div class="ui-widget"  style="display:none" id="error"> 
		<div class="ui-state-error ui-corner-all" style="padding: 0 .7em;"> 
			<p id="error-message"><span class="ui-icon ui-icon-alert" style="float: left; margin-right: .3em;"></span> 
			</p> 
		</div> 
	</div>
    <form action="<%=Url.Action("Edit") %>" method="post" id="editForm">

        <fieldset>
            <legend>Fields</legend>
<#
	foreach(KeyValuePair<string, string> property in properties) {
#>
            <p>
                <label for="<#= property.Key #>"><#= property.Key #>:</label>
                <%=Html.ControlFor("<#= className #>", "<#= property.Key #>", Model.<#= property.Key #>)%>
                <%= Html.ValidationMessage("<#= property.Key #>", "*") %>
            </p>
<#
	}
#>
        </fieldset>

    </form>
    <p>
        <input type="button" value="Save" id="btnSave"/>
        <input type="button" value="Delete" id="btnDelete"/>
    </p>

    <div>
        <%=Html.ActionLink("Back to List", "Index") %>
    </div>

<#
}
#>
<#
// The following code closes the asp:Content tag used in the case of a master page and the body and html tags in the case of a regular view page
#>
<#
if(mvcHost.IsContentPage) {
#>
</asp:Content>
<#
	foreach(string cphid in mvcHost.ContentPlaceHolderIDs) {
		if(!cphid.Equals("TitleContent", StringComparison.OrdinalIgnoreCase) && !cphid.Equals(mvcHost.PrimaryContentPlaceHolderID, StringComparison.OrdinalIgnoreCase)) {
			CPHCounter++;
#>

<asp:Content ID="Content<#= CPHCounter #>" ContentPlaceHolderID="<#= cphid #>" runat="server">
</asp:Content>
<#
		}
	}
#>
<#
} else if(!mvcHost.IsPartialView && !mvcHost.IsContentPage) {
#>
</body>
</html>
<#
}
#>

<#+
public void FilterProperties(Type type, Dictionary<string, string> properties) {
	if(type != null) {
		PropertyInfo[] publicProperties = type.GetProperties(BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);

		foreach (PropertyInfo pi in publicProperties)
		{
			if (pi.GetIndexParameters().Length > 0)
			{
				continue;
			}
			
			Type currentPropertyType = pi.PropertyType;
			Type currentUnderlyingType = System.Nullable.GetUnderlyingType(currentPropertyType);
			
			if(currentUnderlyingType != null) {
				currentPropertyType = currentUnderlyingType;
			}
			
			if (IsBindableType(currentPropertyType) && pi.CanRead && pi.CanWrite)
			{				
				if(currentPropertyType.Equals(typeof(double)) || currentPropertyType.Equals(typeof(decimal))) {
					properties.Add(pi.Name, "String.Format(\"{0:F}\", Model." + pi.Name + ")");
				} else if(currentPropertyType.Equals(typeof(DateTime))) {
					properties.Add(pi.Name, "String.Format(\"{0:g}\", Model." + pi.Name + ")");
				} else {
					properties.Add(pi.Name, "Model." + pi.Name);
				}
			}
		}
	}
}

public bool IsBindableType(Type type)
{
	bool isBindable = false;

	if (type.IsPrimitive || type.Equals(typeof(string)) || type.Equals(typeof(DateTime)) || type.Equals(typeof(decimal)) || type.Equals(typeof(Guid)) || type.Equals(typeof(DateTimeOffset)) || type.Equals(typeof(TimeSpan)))
	{
		isBindable = true;
	}

	return isBindable;
}
#>