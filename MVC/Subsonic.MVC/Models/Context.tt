<#@ template language="C#v3.5" debug="True" hostspecific="True"  #>
<#@ include file="_SQLServer.tt" #>
<#
var tables=LoadTables();
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using SubSonic.DataProviders;
using SubSonic.Linq;
using SubSonic;
using SubSonic.Schema;
using System.Data;
using SubSonic.Extensions;
using SubSonic.Query;
using SubSonic.Linq.Structure;
using System.Linq.Expressions;

namespace <#=Namespace#>{
	public partial class DB:IQuerySurface{

        private DB() { }
        static DB _db;
        public static DB CreateDB() {
            if (_db == null) {
                _db = new DB();
                _db.Init();
            }
            return _db;
        }
	
	    public static void CloseDB(){
	        _db=null;
	    }
        public IDataProvider DataProvider = ProviderFactory.GetProvider("<#=ProviderName#>");
        public  DbQueryProvider provider;

        public ITable FindByPrimaryKey(string pkName){
            return DataProvider.Tables.SingleOrDefault(x => x.PrimaryKey.Name.Equals(pkName, StringComparison.InvariantCultureIgnoreCase));
        }

        public Query<T> GetQuery<T>() {
            return new Query<T>(provider);
        }
        public ITable FindTable(string tableName) {
            return DataProvider.FindTable(tableName);
        }
        
        public ITable FindTableByClassName(string tableName) {
            return DataProvider.FindTableByClassName(tableName);
        }
        
        public IDataProvider Provider {
            get {
                return DataProvider;
            }
        }
        public DbQueryProvider QueryProvider {
            get {
                return provider;
            }
        }
        BatchQuery _batch=null;
        public void Queue<T>(IQueryable<T> qry){
            if(_batch==null)
                _batch=new BatchQuery(Provider,QueryProvider);
            _batch.Queue(qry);
        }
        
        public void Queue(ISqlQuery qry){
            if(_batch==null)
                _batch=new BatchQuery(Provider,QueryProvider);
            _batch.Queue(qry);
        }     
        
        public IDataReader ExecuteBatch(){
            if(_batch==null)
                throw new InvalidOperationException("There's nothing in the queue");
            else
                return _batch.ExecuteReader();
        }
<# //################################################     IQueryable         ####################################### #>			
<#foreach(Table tbl in tables){
	if(!ExcludeTables.Contains(tbl.Name)){

		#>
		public Query<<#=tbl.ClassName#>> <#=tbl.QueryableName#>{ get; set; }
<#  }#>
<#} #>

<# //################################################ Aggregates and Queries ####################################### #>			
	
		#region Aggregates and SubSonic Queries
	    public Select SelectColumns(params string[] columns){
	        return new Select(DataProvider, columns);
	    }
	    public Select Select {
			get{
				return new Select(DataProvider);
            }
        }
	    public Insert Insert {
			get{
				return new Insert(DataProvider);
            }
        }        
        public Update<T> Update<T>() where T:new(){
            return new Update<T>(DataProvider);
        }
        public SqlQuery Delete<T>(Expression<Func<T,bool>> column) where T:new(){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            SqlQuery result = new Delete<T>(DataProvider);
            result = result.From<T>();
            SubSonic.Query.Constraint c = lamda.ParseConstraint();
            result.Constraints.Add(c);
            return result;
        }
        public SqlQuery Max<T>(Expression<Func<T,object>> column){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            string colName = lamda.ParseObjectValue();
            string objectName=typeof(T).Name;
            string tableName = this.DataProvider.FindTableByClassName(objectName).Name;
            return new Select(DataProvider, new Aggregate(colName, AggregateFunction.Max)).From(tableName);
        }
        public SqlQuery Min<T>(Expression<Func<T,object>> column){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            string colName = lamda.ParseObjectValue();
            string objectName=typeof(T).Name;
            string tableName = this.DataProvider.FindTableByClassName(objectName).Name;
            return new Select(DataProvider, new Aggregate(colName, AggregateFunction.Min)).From(tableName);
        }
        public SqlQuery Sum<T>(Expression<Func<T,object>> column){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            string colName = lamda.ParseObjectValue();
            string objectName=typeof(T).Name;
            string tableName = this.DataProvider.FindTableByClassName(objectName).Name;
            return new Select(DataProvider, new Aggregate(colName, AggregateFunction.Sum)).From(tableName);
        }
        public SqlQuery Avg<T>(Expression<Func<T,object>> column){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            string colName = lamda.ParseObjectValue();
            string objectName=typeof(T).Name;
            string tableName = this.DataProvider.FindTableByClassName(objectName).Name;
            return new Select(DataProvider, new Aggregate(colName, AggregateFunction.Avg)).From(tableName);
        }
        public SqlQuery Count<T>(Expression<Func<T,object>> column){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            string colName = lamda.ParseObjectValue();
            string objectName=typeof(T).Name;
            string tableName = this.DataProvider.FindTableByClassName(objectName).Name;
            return new Select(DataProvider, new Aggregate(colName, AggregateFunction.Count)).From(tableName);
        }
        public SqlQuery Variance<T>(Expression<Func<T,object>> column){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            string colName = lamda.ParseObjectValue();
            string objectName=typeof(T).Name;
            string tableName = this.DataProvider.FindTableByClassName(objectName).Name;
            return new Select(DataProvider, new Aggregate(colName, AggregateFunction.Var)).From(tableName);
        }
        public SqlQuery StandardDeviation<T>(Expression<Func<T,object>> column){
            System.Linq.Expressions.LambdaExpression lamda = column as System.Linq.Expressions.LambdaExpression;
            string colName = lamda.ParseObjectValue();
            string objectName=typeof(T).Name;
            string tableName = this.DataProvider.FindTableByClassName(objectName).Name;
            return new Select(DataProvider, new Aggregate(colName, AggregateFunction.StDev)).From(tableName);
        }
        
        #endregion

		void Init(){
			this.provider = new DbQueryProvider(DataProvider);
<# //################################################ QUERIES ####################################### #>			
			#region Query Defs
<#foreach(Table tbl in tables){

	if(!ExcludeTables.Contains(tbl.Name)){
		#>
			this.<#=tbl.QueryableName#> =new Query<<#=tbl.ClassName#>>(this.provider);
<#	}#>
<#} #>			
			#endregion
			
<# //################################################ SCHEMAS ####################################### #>			

			#region Schemas
<#foreach(Table tbl in tables){
	
	if(!ExcludeTables.Contains(tbl.Name)){
		#>
			
			//********************<#=tbl.Name#>********************
			//PK=<#=tbl.PrimaryKey#>
			ITable <#=tbl.CleanName#>Schema=new DatabaseTable("<#=tbl.Name#>",DataProvider);
			<#=tbl.CleanName#>Schema.ClassName="<#=tbl.ClassName#>";
<# 
		foreach(Column col in tbl.Columns){
			string uniqueColumnName=tbl.CleanName+col.Name;
#>
			
			IColumn <#=uniqueColumnName#>=new DatabaseColumn("<#=col.Name#>",<#=tbl.CleanName#>Schema);
<#			if(col.IsPK){#>
			<#=uniqueColumnName#>.IsPrimaryKey=true;
<#			} #>
			<#=uniqueColumnName#>.DataType=DbType.<#=col.DbType.ToString()#>;
			<#=uniqueColumnName#>.IsNullable=<#=col.IsNullable.ToString().ToLower()#>;
			<#=uniqueColumnName#>.AutoIncrement=<#=col.AutoIncrement.ToString().ToLower()#>;
			<#=uniqueColumnName#>.IsForeignKey=<#=col.IsForeignKey.ToString().ToLower()#>;
			<#=tbl.CleanName#>Schema.Columns.Add(<#=uniqueColumnName#>);		
<# 
		}
#>
			DataProvider.Tables.Add(<#=tbl.CleanName#>Schema);
<#	}#>
<#} #>	
			#endregion
		}
		

	}
}